#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Dec  8 16:33:01 2022

@author: mlampert
"""

# class SpatialCalibration():
#     def __init__(self, shot=None,device=None,nbi=None):
#         if shot is None:
#             raise ValueError('shot number is empty')
#         if device is None:
#             raise ValueError('device is not set')
#         if nbi is None:
#             nbi='default'
#         self.shot=shot
#         self.device=device
#         self.nbi=nbi
#         self.get()
#     def get():
import numpy as np

def get_spatcal(shot=None,
                device=None,
                nbi=None,
                temporary=True):

    if device == 'KSTAR':
        if temporary == True and shot == 14110 and nbi == 2:
            R=np.asarray([2172.4240723, 2179.2734375, 2186.1726074, 2193.1218262, 2200.1208496,
               2207.1699219, 2214.2690430, 2221.4182129, 2232.0788574, 2239.3527832,
               2246.6772461, 2254.0522461, 2261.4775391, 2268.9538574, 2276.4804688,
               2284.0581055, 2172.5039062, 2179.2966309, 2186.1386719, 2193.0302734,
               2199.9716797, 2206.9626465, 2214.0036621, 2221.0942383, 2231.6679688,
               2238.8825684, 2246.1474609, 2253.4624023, 2260.8276367, 2268.2434082,
               2275.7094727, 2283.2260742, 2172.5444336, 2179.2727051, 2186.0502930,
               2192.8769531, 2199.7531738, 2206.6787109, 2213.6535645, 2220.6779785,
               2231.1530762, 2238.3007812, 2245.4982910, 2252.7456055, 2260.0427246,
               2267.3901367, 2274.7875977, 2282.2351074, 2172.5361328, 2179.2075195,
               2185.9277344, 2192.6970215, 2199.5153809, 2206.3828125, 2213.2995605,
               2220.2653809, 2230.6533203, 2237.7416992, 2244.8796387, 2252.0668945,
               2259.3041992, 2266.5910645, 2273.9277344, 2281.3142090])
            z=np.asarray([-80.1122208, -80.0056076, -79.9059296, -79.8131866, -79.7273788,
               -79.6485062, -79.5765686, -79.5115662, -79.4281845, -79.3803711,
               -79.3395004, -79.3055573, -79.2785568, -79.2584915, -79.2453613,
               -79.2391663, -73.0818176, -72.9625549, -72.8502121, -72.7447815,
               -72.6462631, -72.5546646, -72.4699860, -72.3922119, -72.2899170,
               -72.2292938, -72.1755753, -72.1287766, -72.0888901, -72.0559235,
               -72.0298691, -72.0107346, -65.1255188, -64.9919739, -64.8653183,
               -64.7455597, -64.6326904, -64.5267105, -64.4276276, -64.3354340,
               -64.2117767, -64.1366653, -64.0684433, -64.0071182, -63.9526825,
               -63.9051399, -63.8644867, -63.8307304, -58.0794067, -57.9332314,
               -57.7939301, -57.6614952, -57.5359383, -57.4172478, -57.3054314,
               -57.2004890, -57.0579376, -56.9700241, -56.8889809, -56.8148079,
               -56.7475090, -56.6870804, -56.6335220, -56.5868378])
            phi=np.asarray([0.5073246, 0.5051091, 0.5028950, 0.5006824, 0.4984714,
                 0.4962622, 0.4940548, 0.4918495, 0.4885933, 0.4863933,
                 0.4841958, 0.4820009, 0.4798085, 0.4776189, 0.4754321,
                 0.4732483, 0.5072986, 0.5051017, 0.5029058, 0.5007114,
                 0.4985183, 0.4963268, 0.4941370, 0.4919490, 0.4887181,
                 0.4865350, 0.4843542, 0.4821757, 0.4799997, 0.4778262,
                 0.4756553, 0.4734873, 0.5072855, 0.5051094, 0.5029342,
                 0.5007600, 0.4985871, 0.4964156, 0.4942455, 0.4920770,
                 0.4888745, 0.4867105, 0.4845484, 0.4823885, 0.4802307,
                 0.4780754, 0.4759225, 0.4737721, 0.5072883, 0.5051304,
                 0.5029733, 0.5008171, 0.4986619, 0.4965079, 0.4943552,
                 0.4922039, 0.4890265, 0.4868791, 0.4847336, 0.4825900,
                 0.4804484, 0.4783090, 0.4761718, 0.4740371])
            spatcal=np.zeros([4,16,3])
            spatcal[:,:,0]=np.reshape(R,(4,16))
            spatcal[:,:,1]=np.reshape(z,(4,16))
            spatcal[:,:,2]=np.reshape(phi,(4,16))

            results={'R':np.reshape(R,(4,16)),
                     'z':np.reshape(z,(4,16)),
                     'phi':np.reshape(phi,(4,16)),
                     'spatcal':spatcal}

            return results