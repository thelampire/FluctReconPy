#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Dec  8 16:33:01 2022

@author: mlampert
"""

# class SpatialCalibration():
#     def __init__(self, shot=None,device=None,nbi=None):
#         if shot is None:
#             raise ValueError('shot number is empty')
#         if device is None:
#             raise ValueError('device is not set')
#         if nbi is None:
#             nbi='default'
#         self.shot=shot
#         self.device=device
#         self.nbi=nbi
#         self.get()
#     def get():
import numpy as np

def get_spatcal(shot=None,
                device=None,
                nbi=None,
                temporary=True):

    if device == 'KSTAR':
        if temporary == True and shot == 14110 and nbi == 2:
            R=np.asarray([2172.4240723, 2179.2734375, 2186.1726074, 2193.1218262, 2200.1208496,
               2207.1699219, 2214.2690430, 2221.4182129, 2232.0788574, 2239.3527832,
               2246.6772461, 2254.0522461, 2261.4775391, 2268.9538574, 2276.4804688,
               2284.0581055, 2172.5039062, 2179.2966309, 2186.1386719, 2193.0302734,
               2199.9716797, 2206.9626465, 2214.0036621, 2221.0942383, 2231.6679688,
               2238.8825684, 2246.1474609, 2253.4624023, 2260.8276367, 2268.2434082,
               2275.7094727, 2283.2260742, 2172.5444336, 2179.2727051, 2186.0502930,
               2192.8769531, 2199.7531738, 2206.6787109, 2213.6535645, 2220.6779785,
               2231.1530762, 2238.3007812, 2245.4982910, 2252.7456055, 2260.0427246,
               2267.3901367, 2274.7875977, 2282.2351074, 2172.5361328, 2179.2075195,
               2185.9277344, 2192.6970215, 2199.5153809, 2206.3828125, 2213.2995605,
               2220.2653809, 2230.6533203, 2237.7416992, 2244.8796387, 2252.0668945,
               2259.3041992, 2266.5910645, 2273.9277344, 2281.3142090])
            z=np.asarray([-18.3017521, -18.0691433, -17.8458366, -17.6318283,
                          -17.4271183, -17.2317104, -17.0456009, -16.8687916,
                          -16.6244564, -16.4706936, -16.3262291, -16.1910667,
                          -16.0652027, -15.9486389, -15.8413744, -15.7434092,
                          -8.5842123,  -8.3345747,  -8.0942087,  -7.8631153,
                          -7.6412940,  -7.4287448,  -7.2254672,  -7.0314622,
                          -6.7616558,  -6.5906291,  -6.4288745,  -6.2763915,
                          -6.1331811,  -5.9992428,  -5.8745761,  -5.7591815,
                          2.4127333,   2.6816111,   2.9412472,   3.1916430,
                          3.4327974,   3.6647115,   3.8873842,   4.1008162,
                          4.3993974,   4.5899282,   4.7712178,   4.9432669,
                          5.1060748,   5.2596416,   5.4039683,   5.5390534,
                          12.1513300,  12.4372168,  12.7138901,  12.9813509,
                          13.2395973,  13.4886312,  13.7284508,  13.9590578,
                          14.2830772,  14.4908514,  14.6894112,  14.8787584,
                          15.0588923,  15.2298126,  15.3915186,  15.5440130])
            phi=np.asarray([0.5073246, 0.5051091, 0.5028950, 0.5006824, 0.4984714,
                 0.4962622, 0.4940548, 0.4918495, 0.4885933, 0.4863933,
                 0.4841958, 0.4820009, 0.4798085, 0.4776189, 0.4754321,
                 0.4732483, 0.5072986, 0.5051017, 0.5029058, 0.5007114,
                 0.4985183, 0.4963268, 0.4941370, 0.4919490, 0.4887181,
                 0.4865350, 0.4843542, 0.4821757, 0.4799997, 0.4778262,
                 0.4756553, 0.4734873, 0.5072855, 0.5051094, 0.5029342,
                 0.5007600, 0.4985871, 0.4964156, 0.4942455, 0.4920770,
                 0.4888745, 0.4867105, 0.4845484, 0.4823885, 0.4802307,
                 0.4780754, 0.4759225, 0.4737721, 0.5072883, 0.5051304,
                 0.5029733, 0.5008171, 0.4986619, 0.4965079, 0.4943552,
                 0.4922039, 0.4890265, 0.4868791, 0.4847336, 0.4825900,
                 0.4804484, 0.4783090, 0.4761718, 0.4740371])
            spatcal=np.zeros([4,16,3])
            spatcal[:,:,0]=np.reshape(R,(4,16))
            spatcal[:,:,1]=np.reshape(z,(4,16))
            spatcal[:,:,2]=np.reshape(phi,(4,16))

            results={'R':np.reshape(R,(4,16)),
                     'z':np.reshape(z,(4,16)),
                     'phi':np.reshape(phi,(4,16)),
                     'spatcal':np.flip(spatcal, axis=1)}

            return results