#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Mon Sep 19 19:22:30 2022@author: mlampert"""class Hell(Exception):passimport osimport copyimport matplotlib.pyplot as pltfrom matplotlib.backends.backend_pdf import PdfPagesfrom matplotlib.ticker import MaxNLocatorimport numpy as npfrom skimage.filters import window, difference_of_gaussiansfrom scipy.io import readsavfig_dir='/publication_figures/rsi_2023'wd='/Users/mlampert/work/NSTX_workspace'def plot_results_for_rsi_2023_paper(plot_figure=2,                                    save_data_into_txt=False,                                    plot_all=False,                                    nocalc=True):    if plot_all:        plot_figure=-1        for i in range(15):            plot_results_for_rsi_2023_paper(plot_figure=i,                                            save_data_into_txt=save_data_into_txt)    plt.rc('font', family='serif', serif='Helvetica')    labelsize=9.    linewidth=0.5    major_ticksize=2.    plt.rc('text', usetex=False)    plt.rcParams['pdf.fonttype'] = 42    plt.rcParams['ps.fonttype'] = 42    plt.rcParams['lines.linewidth'] = linewidth    plt.rcParams['axes.linewidth'] = linewidth    plt.rcParams['axes.labelsize'] = labelsize    plt.rcParams['axes.titlesize'] = labelsize    plt.rcParams['xtick.labelsize'] = labelsize    plt.rcParams['xtick.major.size'] = major_ticksize    plt.rcParams['xtick.major.width'] = linewidth    plt.rcParams['xtick.minor.width'] = linewidth/2    plt.rcParams['xtick.minor.size'] = major_ticksize/2    plt.rcParams['ytick.labelsize'] = labelsize    plt.rcParams['ytick.major.width'] = linewidth    plt.rcParams['ytick.major.size'] = major_ticksize    plt.rcParams['ytick.minor.width'] = linewidth/2    plt.rcParams['ytick.minor.size'] = major_ticksize/2    plt.rcParams['legend.fontsize'] = labelsize    if plot_figure == 6:        data1=readsav('/Users/mlampert/IDLWorkspace83/fluct_response_matrix.sav')        spatial_position=data1['spatial_pos'].T        fluctuation_response_matrix=data1['fluct_resp_matrix'].T        filename='fig6_fluct_response_matrix'        pdf=PdfPages(wd+fig_dir+'/'+filename+'.pdf')        fig,ax=plt.subplots(1,1,                             figsize=(8.5/2.54,                                      8.5/2.54/np.sqrt(2)))        for ind in range(8,fluctuation_response_matrix.shape[1]-1):            ax.plot(spatial_position[0,:,0],                    fluctuation_response_matrix[0,ind,0,:],                    label=str(int(spatial_position[0,ind,0])))        ax.legend(title='$R_{fluct} [m]$')        ax.set_title('Fluctuation response profiles')        ax.set_xlabel('R [mm]')        ax.set_ylabel('Response [$V/10^{19}m^{-3}$]')        ax.set_ylim([1e-3,2])        #ax.set_yscale('log')        #ax.set_aspect('equal')        #ax.text(-0.5, 1.2, '(a)', transform=ax.transAxes, size=9)        #ax.xaxis.set_major_locator(MaxNLocator(5))        #ax.yaxis.set_major_locator(MaxNLocator(5))        #ax.set_xticks(ticks=[-500,-250,0,250,500])        #ax.set_xlim([-500,500])        x1,x2=ax.get_xlim()        y1,y2=ax.get_ylim()        plt.tight_layout(pad=0.5)        pdf.savefig()        pdf.close()        if save_data_into_txt:            filename=wd+fig_dir+'/data_accessibility/'+filename+'.txt'            file1=open(filename, 'w+')            file1.write('\nRadial coordinate [mm]\n\n')            string=''            for ind in range(len(spatial_position[0,:,0])):                string+=str(spatial_position[0,ind,0])+'\t'            string+='\n'            file1.write(string)            string=''            file1.write('\nFluctuation response [V/1e19m-3]\n\n')            for ind_rad in range(8,fluctuation_response_matrix.shape[1]-1):                string+='Fluctuation at R='+str(int(spatial_position[0,ind_rad,0]))+'mm\n'                for ind in range(len(fluctuation_response_matrix[0,ind_rad,0,:])):                    string+=str(fluctuation_response_matrix[0,ind_rad,0,ind])+'\t'                string+='\n'            file1.write(string)            file1.close()    #Example reconstructed synthetic electron density fluctuation    if plot_figure == 7:        #IDL CODE TO GET THIS: test_decomp_all, recalc=0, decompose=1, visual=1, try_one=1, save_plot_data=1        #AND:                  test_decomp_all, recalc=0, decompose=0, visual=1, try_one=1, save_plot_data=1        data=readsav('/Users/mlampert/IDLWorkspace83/test_fluct_decomp/test_fluct_decomp_N_0.100000_BS_2_R_10.sav_one_event.sav')        #data_direct=readsav('/Users/mlampert/IDLWorkspace83/test_fluct_decomp/test_fluct_decomp_N_0.0500000_BS_2_R_10_direct.sav_one_event.sav')        data_direct=readsav('/Users/mlampert/IDLWorkspace83/test_fluct_decomp/test_fluct_decomp_N_0.100000_BS_3_R_10_direct.sav_one_event.sav')        # keys=['r_vec',        #       'z_vec',        #       'n_vector',        #       'n_vector_calc',        #       's_vector_ref',        #       's_vector_calc',        #       's_vector_no_noise',        #       'p_vector']        grid=False        filename='fig7_one_blob_event'        pdf=PdfPages(wd+fig_dir+'/'+filename+'.pdf')        fig,axs=plt.subplots(6,1,                             figsize=(8.5/2.54,                                      8.5/2.54*1.5))        xlabel_pos=-0.15        ax=axs[0]        ax.contourf(data['r_vec'],                    data['z_vec'],                    data['n_vector'][0,:,:].T)        ax.set_ylabel('z [mm]')        ax.set_title('Original $n_e$ fluctuation')        ax.xaxis.set_tick_params(labelbottom=False)        ax.grid(grid)        ax.text(xlabel_pos, 1.2, '(a)', transform=ax.transAxes, size=9)        ax=axs[1]        ax.contourf(data['r_vec'],                    data['z_vec'],                    data['s_vector_no_noise'])        ax.set_ylabel('z [mm]')        ax.set_title('Light response without noise')        ax.xaxis.set_tick_params(labelbottom=False)        ax.grid(visible=grid, axis='both')        ax.text(xlabel_pos, 1.2, '(b)', transform=ax.transAxes, size=9)        ax=axs[2]        ax.contourf(data['r_vec'],                    data['z_vec'],                    data['s_vector_ref'])        ax.set_ylabel('z [mm]')        ax.set_title('Light response with 10% photon-noise')        ax.xaxis.set_tick_params(labelbottom=False)        ax.grid(visible=grid, axis='both')        ax.text(xlabel_pos, 1.2, '(c)', transform=ax.transAxes, size=9)        ax=axs[3]        ax.contourf(data['r_vec'],                    data['z_vec'],                    data['n_vector_calc'][0,:,:].T)        ax.set_ylabel('z [mm]')        ax.set_title('Reconstructed $n_e$ fluctuation \n with undulation minimization')        ax.xaxis.set_tick_params(labelbottom=False)        ax.grid(visible=grid, axis='both')        ax.text(xlabel_pos, 1.2, '(d)', transform=ax.transAxes, size=9)        ax=axs[4]        ax.contourf(data['r_vec'],                    data['z_vec'],                    data_direct['n_vector_calc'][0,:,:].T)        ax.set_ylabel('z [mm]')        ax.set_title('Reconstructed $n_e$ fluctuation \n with direct inversion')        ax.xaxis.set_tick_params(labelbottom=False)        ax.grid(visible=grid, axis='both')        ax.text(xlabel_pos, 1.2, '(e)', transform=ax.transAxes, size=9)        ax=axs[5]        ax.contourf(data['r_vec'],                    data['z_vec'],                    data['s_vector_calc'])        ax.set_xlabel('R [mm]')        ax.set_ylabel('z [mm]')        ax.set_title('Reconstructed light \n with undulation minimization')        ax.grid(visible=grid, axis='both')        ax.text(xlabel_pos, 1.2, '(f)', transform=ax.transAxes, size=9)        plt.tight_layout(pad=0.5)        pdf.savefig()        pdf.close()        if save_data_into_txt:            filename=wd+fig_dir+'/data_accessibility/'+filename+'.txt'            file1=open(filename, 'w+')            string='\nRadial coordinate [mm]\n\n'            for ind in range(len(data['r_vec'])):                string+=str(data['r_vec'][ind])+'\t'            string+='\n'            file1.write(string)            string='\Vertical coordinate [mm]\n\n'            for ind in range(len(data['z_vec'])):                string+=str(data['z_vec'][ind])+'\t'            string+='\n'            file1.write(string)            string='\nOriginal $n_e$ fluctuations\n\n'            data_curr=data['n_vector'][0,:,:].T            for ind_x in range(len(data_curr[:,0])):                for ind_y in range(len(data_curr[0,:])):                    string+=str(data_curr[ind_x,ind_y])+'\t'                string+='\n'            file1.write(string)            string='\nLight response without noise\n\n'            data_curr=data['s_vector_no_noise']            for ind_x in range(len(data_curr[:,0])):                for ind_y in range(len(data_curr[0,:])):                    string+=str(data_curr[ind_x,ind_y])+'\t'                string+='\n'            file1.write(string)            string='\nLight response with 5% photon-noise\n\n'            data_curr=data['s_vector_ref']            for ind_x in range(len(data_curr[:,0])):                for ind_y in range(len(data_curr[0,:])):                    string+=str(data_curr[ind_x,ind_y])+'\t'                string+='\n'            file1.write(string)            string='\nReconstructed $n_e$ fluctuation from direct inversion\n\n'            data_curr=data['n_vector_calc']            for ind_x in range(len(data_curr[:,0])):                for ind_y in range(len(data_curr[0,:])):                    string+=str(data_curr[ind_x,ind_y])+'\t'                string+='\n'            file1.write(string)            string='\nReconstructed $n_e$ fluctuation from direct inversion\n\n'            data_curr=data_direct['n_vector_calc']            for ind_x in range(len(data_curr[:,0])):                for ind_y in range(len(data_curr[0,:])):                    string+=str(data_curr[ind_x,ind_y])+'\t'                string+='\n'            file1.write(string)            string='\nReconstructed light from undulation minimization\n\n'            data_curr=data['s_vector_calc']            for ind_x in range(len(data_curr[:,0])):                for ind_y in range(len(data_curr[0,:])):                    string+=str(data_curr[ind_x,ind_y])+'\t'                string+='\n'            file1.write(string)            file1.close()    """        NEEDS TO BE REDONE to 2x3 smaller figure    """    if plot_figure == 8:        data_und=readsav('/Users/mlampert/IDLWorkspace83/test_decomp_all_save_0-50noise_nores_dens.sav')        data_dir=readsav('/Users/mlampert/IDLWorkspace83/test_decomp_all_save_0-50noise_nores_dens_direct.sav')        filename='fig8_average_deviation'        pdf=PdfPages(wd+fig_dir+'/'+filename+'.pdf')        xlabel_pos=-0.3        ylabel_pos= 1.10        fig,axs=plt.subplots(2,3,                             figsize=(17/2.54,                                      17/2.54))        ax=axs[0,0]        for ind_blob_size in range(len(data_und['chi2'].T[0,:,0,0])):            ax.errorbar(data_und['noise_vector'],                        np.squeeze(np.mean(data_und['chi2'].T[:,ind_blob_size,:,:],axis=2)),                        yerr=np.squeeze(np.sqrt(np.var(data_und['chi2'].T[:,ind_blob_size,:,:],axis=2))),                        label=str((ind_blob_size+2)*5)+' mm')        ax.set_xlim([0,0.2])        ax.set_ylim([0,0.04])        ax.set_xlabel('Relative noise amplitude')        ax.set_ylabel('Average density deviation [$10^{19} m^{-3}$]')        ax.set_title('Reconstruction accuracy for \n undulation minimization')        ax.text(xlabel_pos, ylabel_pos, '(a)', transform=ax.transAxes, size=9)        ax.axhline(y=0,color='black')        ax=axs[0,1]        for ind_blob_size in range(len(data_dir['chi2'].T[0,:,0,0])):            ax.errorbar(data_und['noise_vector'],                        np.squeeze(np.mean(data_dir['chi2'].T[:,ind_blob_size,:,:],axis=2)),                        yerr=np.squeeze(np.sqrt(np.var(data_dir['chi2'].T[:,ind_blob_size,:,:],axis=2))),                        label=str((ind_blob_size+2)*5)+' mm')        #ax.legend(title='Blob size')        ax.set_xlim([0,0.2])        ax.set_ylim([0,0.04])        ax.set_xlabel('Relative noise amplitude')        ax.set_ylabel('Average density deviation [$10^{19} m^{-3}$]')        ax.set_title('Reconstruction accuracy for \n direct inversion')        ax.text(xlabel_pos, ylabel_pos, '(b)', transform=ax.transAxes, size=9)        ax.axhline(y=0,color='black')        ax=axs[0,2]        for ind_blob_size in range(len(data_dir['chi2'].T[0,:,0,0])):            delta_und=np.squeeze(np.sqrt(np.var(data_und['chi2'].T[:,ind_blob_size,:,:],axis=2)))            delta_dir=np.squeeze(np.sqrt(np.var(data_dir['chi2'].T[:,ind_blob_size,:,:],axis=2)))            data_und_curr=np.squeeze(np.mean(data_und['chi2'].T[:,ind_blob_size,:,:],axis=2))            data_dir_curr=np.squeeze(np.mean(data_dir['chi2'].T[:,ind_blob_size,:,:],axis=2))            yerr=delta_und+delta_dir            ax.errorbar(data_dir['noise_vector'],                        data_und_curr - data_dir_curr,                        yerr=yerr,                        label=str((ind_blob_size+2)*5/10))        #ax.legend(title='Blob size')        ax.legend(title='Blob\nsize\n[$\Delta R$]',                  loc='upper center', bbox_to_anchor=(1.3, 1.03))        ax.set_xlabel('Relative noise amplitude')        ax.set_ylabel('Reconstruction difference')        ax.set_title('Difference between (a) and (b)')        ax.text(xlabel_pos, ylabel_pos, '(c)', transform=ax.transAxes, size=9)        ax.axhline(y=0,color='black')        ax=axs[1,0]        data_und_curr= np.squeeze(((data_und['density_calc'].T)))-1 #The original density was set to 1, 'density_orig' is wrong data.                                    #-data_und['density_orig'].T)/                                    #data_und['density_orig'].T))        mean_data_und=np.mean(data_und_curr, axis=2)        delta_data_und=np.sqrt(np.var(data_und_curr, axis=2))        for ind_blob_size in range(len(data_und['chi2'].T[0,:,0,0])):            ax.errorbar(data_und['noise_vector'],                        mean_data_und[:,ind_blob_size],                        yerr=delta_data_und[:,ind_blob_size],                        label=str((ind_blob_size+2)*5)+' mm')        ax.set_xlabel('Relative noise amplitude')        ax.set_ylabel('Average density deviation [$10^{19} m^{-3}$]')        ax.set_title('Blob density reconstruction \n accuracy for undulation minimization')        ax.text(xlabel_pos, ylabel_pos, '(d)', transform=ax.transAxes, size=9)        ax.set_ylim([np.min(mean_data_und),0])        ax.axhline(y=0,color='black')        ax.set_xlim([0,0.2])        ax.set_ylim([-1,2])        ax=axs[1,1]        data_dir_curr=np.squeeze(((data_dir['density_calc'].T)))-1                                   #-data_dir['density_orig'].T)/                                   #data_dir['density_orig'].T))        mean_data_dir=np.mean(data_dir_curr, axis=2)        delta_data_dir=np.sqrt(np.var(data_dir_curr, axis=2))        for ind_blob_size in range(len(data_dir['chi2'].T[0,:,0,0])):            ax.errorbar(data_dir['noise_vector'],                        mean_data_dir[:,ind_blob_size],                        yerr=delta_data_dir[:,ind_blob_size],                        label=str((ind_blob_size+2)*5)+' mm')        #ax.legend(title='Blob size')        ax.set_xlabel('Relative noise amplitude')        ax.set_ylabel('Average density deviation [$10^{19} m^{-3}$]')        ax.set_title('Blob density reconstruction \n accuracy for direct inversion')        ax.text(xlabel_pos, ylabel_pos, '(e)', transform=ax.transAxes, size=9)        ax.set_ylim([np.min(mean_data_und),2])        ax.axhline(y=0,color='black')        ax.set_xlim([0,0.2])        ax.set_ylim([-1,2])        ax=axs[1,2]        delta_data_relative=np.sqrt((delta_data_dir**2 + delta_data_und**2))        for ind_blob_size in range(len(data_dir['chi2'].T[0,:,0,0])):            ax.errorbar(data_dir['noise_vector'],                        (np.abs(mean_data_und)-np.abs(mean_data_dir))[:,ind_blob_size],                        yerr=delta_data_relative[:,ind_blob_size],                        label=str((ind_blob_size+2)*5/10))        #ax.legend(title='Blob size')        ax.legend(title='Blob\nsize\n[$\Delta R$]',                  loc='upper center', bbox_to_anchor=(1.3, 1.03))        ax.set_xlabel('Relative noise amplitude')        ax.set_ylabel('Relative reconstruction difference [$10^{19} m^{-3}$]')        ax.set_title('Difference between the absolute \n values of (d) and (e)')        ax.text(xlabel_pos, ylabel_pos, '(f)', transform=ax.transAxes, size=9)        ax.set_ylim([-2,2])        ax.axhline(y=0,color='black')        plt.tight_layout(pad=0.5)        pdf.savefig()        pdf.close()        if save_data_into_txt:            filename=wd+fig_dir+'/data_accessibility/'+filename+'.txt'            file1=open(filename, 'w+')            string='\nRelative noise amplitude\n\n'            for ind in range(len(data_dir['noise_vector'])):                string+=str(data_dir['noise_vector'][ind])+'\t'            string+='\n'            file1.write(string)        #Fig 8a            string='\n Fig 8a \n Average density deviation undulation minimization[$10^{19} m^{-3}$]\n'            file1.write(string)            for ind_blob_size in range(len(data_und['chi2'].T[0,:,0,0])):                data=np.squeeze(np.mean(data_und['chi2'].T[:,ind_blob_size,:,:],axis=2))                error=np.squeeze(np.sqrt(np.var(data_und['chi2'].T[:,ind_blob_size,:,:],axis=2)))                string='\nBlob size [$\Delta R$]: '+str((ind_blob_size+2)*5/10)+' \n'                err_string='\nUncertainty for blob size '+str((ind_blob_size+2)*5/10)+' \n'                for ind in range(len(data)):                    string+=str(data[ind])+'\t'                    err_string+=str(error[ind])+'\t'                string+='\n'                err_string+='\n'                file1.write(string)                file1.write(err_string)        #Fig 8b            string='\n Fig 8b \n Average density deviation direct method[$10^{19} m^{-3}$]\n'            file1.write(string)            for ind_blob_size in range(len(data_und['chi2'].T[0,:,0,0])):                data=np.squeeze(np.mean(data_dir['chi2'].T[:,ind_blob_size,:,:],axis=2))                error=np.squeeze(np.sqrt(np.var(data_dir['chi2'].T[:,ind_blob_size,:,:],axis=2)))                string='\nBlob size [$\Delta R$]: '+str((ind_blob_size+2)*5/10)+' \n'                err_string='\nUncertainty for blob size '+str((ind_blob_size+2)*5/10)+' \n'                for ind in range(len(data)):                    string+=str(data[ind])+'\t'                    err_string+=str(error[ind])+'\t'                string+='\n'                err_string+='\n'                file1.write(string)                file1.write(err_string)        #Fig 8c            string='\n Fig 8c \n Difference between Fig 8a and Fig 8b\n'            file1.write(string)            for ind_blob_size in range(len(data_und['chi2'].T[0,:,0,0])):                delta_und=np.squeeze(np.sqrt(np.var(data_und['chi2'].T[:,ind_blob_size,:,:],axis=2)))                delta_dir=np.squeeze(np.sqrt(np.var(data_dir['chi2'].T[:,ind_blob_size,:,:],axis=2)))                data_und_curr=np.squeeze(np.mean(data_und['chi2'].T[:,ind_blob_size,:,:],axis=2))                data_dir_curr=np.squeeze(np.mean(data_dir['chi2'].T[:,ind_blob_size,:,:],axis=2))                error=delta_und+delta_dir                data=data_und_curr - data_dir_curr                string='\nBlob size [$\Delta R$]: '+str((ind_blob_size+2)*5/10)+' \n'                err_string='\nUncertainty for blob size '+str((ind_blob_size+2)*5/10)+' \n'                for ind in range(len(data)):                    string+=str(data[ind])+'\t'                    err_string+=str(error[ind])+'\t'                string+='\n'                err_string+='\n'                file1.write(string)                file1.write(err_string)        #Fig 8d            string='\n Fig 8d \n Average density deviation undulation minimization[$10^{19} m^{-3}$]\n\n'            file1.write(string)            data_und_curr= np.squeeze(((data_und['density_calc'].T)))-1 #The original density was set to 1, 'density_orig' is wrong data.                                        #-data_und['density_orig'].T)/                                        #data_und['density_orig'].T))            mean_data_und=np.mean(data_und_curr, axis=2)            delta_data_und=np.sqrt(np.var(data_und_curr, axis=2))            for ind_blob_size in range(len(data_und['chi2'].T[0,:,0,0])):                data=mean_data_und[:,ind_blob_size]                error=delta_data_und[:,ind_blob_size]                string='Blob size [$\Delta R$]: '+str((ind_blob_size+2)*5/10)+' \n'                err_string='\nUncertainty for blob size '+str((ind_blob_size+2)*5/10)+' \n'                for ind in range(len(data)):                    string+=str(data[ind])+'\t'                    err_string+=str(error[ind])+'\t'                string+='\n'                err_string+='\n'                file1.write(string)                file1.write(err_string)        #Fig 8e            string='\n Fig 8e /n Average density deviation for direct inversion [$10^{19} m^{-3}$]\n'            file1.write(string)            data_dir_curr=np.squeeze(((data_dir['density_calc'].T)))-1                                       #-data_dir['density_orig'].T)/                                       #data_dir['density_orig'].T))            mean_data_dir=np.mean(data_dir_curr, axis=2)            delta_data_dir=np.sqrt(np.var(data_dir_curr, axis=2))            for ind_blob_size in range(len(data_und['chi2'].T[0,:,0,0])):                data=mean_data_dir[:,ind_blob_size]                error=delta_data_dir[:,ind_blob_size]                string='\nBlob size [$\Delta R$]: '+str((ind_blob_size+2)*5/10)+' \n'                err_string='\nUncertainty for blob size '+str((ind_blob_size+2)*5/10)+' \n'                for ind in range(len(data)):                    string+=str(data[ind])+'\t'                    err_string+=str(error[ind])+'\t'                string+='\n'                err_string+='\n'                file1.write(string)                file1.write(err_string)        #Fig 8f            string='\n Fig 8f \n Difference between Fig 8d and Fig 8e\n'            file1.write(string)            for ind_blob_size in range(len(data_und['chi2'].T[0,:,0,0])):                data=np.squeeze(np.mean(data_und['chi2'].T[:,ind_blob_size,:,:],axis=2))                error=np.squeeze(np.sqrt(np.var(data_und['chi2'].T[:,ind_blob_size,:,:],axis=2)))                string='Blob size [$\Delta R$]: '+str((ind_blob_size+2)*5/10)+' \n'                err_string='\nUncertainty for blob size '+str((ind_blob_size+2)*5/10)+' \n'                for ind in range(len(data)):                    string+=str(data[ind])+'\t'                    err_string+=str(error[ind])+'\t'                string+='\n'                err_string+='\n'                file1.write(string)                file1.write(err_string)            file1.close()    if plot_figure == 9:        data_und_all=readsav('/Users/mlampert/IDLWorkspace83/test_decomp_all_save_0-50noise_nores_dens.sav')        data_dir_all=readsav('/Users/mlampert/IDLWorkspace83/test_decomp_all_save_0-50noise_nores_dens_direct.sav')        filename='fig9_size_vs_noise'        pdf=PdfPages(wd+fig_dir+'/'+filename+'.pdf')        xlabel_pos= -0.1        ylabel_pos= 1.10        data_und_mean=np.mean(np.squeeze((data_und_all['pos_calc'].T-data_und_all['pos_orig'].T)/data_und_all['pos_orig'].T),axis=2)        delta_data_und=np.sqrt(np.var(np.squeeze((data_und_all['pos_calc'].T-data_und_all['pos_orig'].T)/data_und_all['pos_orig'].T),axis=2))        data_dir_mean=np.mean(np.squeeze((data_dir_all['pos_calc'].T-data_dir_all['pos_orig'].T)/data_dir_all['pos_orig'].T),axis=2)        delta_data_dir=np.sqrt(np.var(np.squeeze((data_dir_all['pos_calc'].T-data_dir_all['pos_orig'].T)/data_dir_all['pos_orig'].T),axis=2))        yrange_rad=np.asarray([np.min([data_und_mean[:,:,0]-delta_data_und[:,:,0],                                       #data_dir_mean[:,:,0]-delta_data_dir[:,:,0]                                       ]),                                np.max([data_und_mean[:,:,0]+delta_data_und[:,:,0],                                        #data_dir_mean[:,:,0]+delta_data_dir[:,:,0]                                        ])])        yrange_vert=np.asarray([np.min([data_und_mean[:,:,1]-delta_data_und[:,:,1],                                        #data_dir_mean[:,:,1]-delta_data_dir[:,:,1]                                        ]),                                np.max([data_und_mean[:,:,1]+delta_data_und[:,:,1],                                        #data_dir_mean[:,:,1]+delta_data_dir[:,:,1]                                        ])])        fig,axs=plt.subplots(3,2,                             figsize=(8.5/2.54,                                      1.5*8.5/2.54)                                      #8.5/2.54)                                      )        ax=axs[0,0]        for ind_blob_size in range(len(data_und_mean[0,:,0])-1,-1,-1):            ax.errorbar(data_dir_all['noise_vector'],                        data_und_mean[:,ind_blob_size,0]*1e3,                        yerr=delta_data_und[:,ind_blob_size,0]*1e3,                        label=str((ind_blob_size+2)*5/10))        #ax.legend(title='Blob size')        # ax.set_ylabel('Relative $\Delta R_{blob}$ [$10^{-3}$]')        ax.set_ylabel('Relative $\Delta R_{blob}$ [$10^{-3}$]')        ax.set_title('Undulation \nminimization')        ax.text(xlabel_pos, ylabel_pos, '(a)', transform=ax.transAxes, size=9)        ax.xaxis.set_tick_params(labelbottom=False)        ax.set_xlim([0,0.2])        ax.set_ylim([-3,yrange_rad[1]*1e3])        ax.axhline(y=0,color='black')        ax.set_yticks([-3,-2,-1,0,1,2,3])        ax=axs[0,1]        for ind_blob_size in range(len(data_dir_mean[0,:,0])-1,-1,-1):            ax.errorbar(data_dir_all['noise_vector'],                        data_dir_mean[:,ind_blob_size,0]*1e3,                        yerr=delta_data_dir[:,ind_blob_size,0]*1e3,                        label=str((ind_blob_size+2)*5/10))        ax.set_title('Direct \ninversion')        # ax.set_xlabel('Relative noise \namplitude')        #ax.set_ylabel('Relative $\Delta R_{blob}$')        ax.set_xticks([0,0.1,0.2])        ax.text(xlabel_pos, ylabel_pos, '(b)', transform=ax.transAxes, size=9)        ax.xaxis.set_tick_params(labelbottom=False)        ax.yaxis.set_tick_params(labelleft=False)        #ax.set_ylim([-2,2])        ax.set_ylim([-3,yrange_rad[1]*1e3])        ax.set_yticks([-3,-2,-1,0,1,2,3])        ax.set_xlim([0,0.2])        ax.axhline(y=0,color='black')        ax=axs[1,0]        for ind_blob_size in range(len(data_und_mean[0,:,1])-1,-1,-1):            ax.errorbar(data_und_all['noise_vector'],                        data_und_mean[:,ind_blob_size,1],                        yerr=delta_data_und[:,ind_blob_size,1],                        label=str((ind_blob_size+2)*5/10))        #ax.legend(title='Blob size')        # ax.set_xlabel('Relative noise \namplitude')        ax.xaxis.set_tick_params(labelbottom=False)        ax.set_ylabel('Relative $\Delta z_{blob}$')        ax.set_title('Undulation \nminimization')        ax.text(xlabel_pos, ylabel_pos, '(c)', transform=ax.transAxes, size=9)        ax.axhline(y=0,color='black')        ax.set_ylim([-2,2])        ax.set_xlim([0,0.2])        ax=axs[1,1]        for ind_blob_size in range(len(data_dir_mean[0,:,1])-1,-1,-1):            ax.errorbar(data_dir_all['noise_vector'],                        data_dir_mean[:,ind_blob_size,1],                        yerr=delta_data_dir[:,ind_blob_size,1],                        label=str((ind_blob_size+2)*5/10))        #ax.legend(title='Blob size')        # ax.set_xlabel('Relative noise \namplitude')        #ax.set_ylabel('Relative $\Delta z_{blob}$')        ax.set_xticks([0,0.1,0.2])        ax.set_title('Direct \ninversion')        ax.text(xlabel_pos, ylabel_pos, '(d)', transform=ax.transAxes, size=9)        ax.yaxis.set_tick_params(labelleft=False)        ax.xaxis.set_tick_params(labelbottom=False)        ax.set_ylim([-2,2])        ax.set_xlim([0,0.2])        ax.axhline(y=0,color='black')        data=(np.mean(np.abs(np.squeeze((data_und_all['pos_calc'].T-data_und_all['pos_orig'].T)/data_und_all['pos_orig'].T)),axis=2)-              np.mean(np.abs(np.squeeze((data_dir_all['pos_calc'].T-data_dir_all['pos_orig'].T)/data_dir_all['pos_orig'].T)),axis=2))        delta_data=np.sqrt(np.var(np.abs(np.squeeze((data_dir_all['pos_calc'].T-data_dir_all['pos_orig'].T)/data_und_all['pos_orig'].T)),axis=2)+                           np.var(np.abs(np.squeeze((data_und_all['pos_calc'].T-data_und_all['pos_orig'].T)/data_und_all['pos_orig'].T)),axis=2))        ax=axs[2,0]        for ind_blob_size in range(len(data_und_mean[0,:,1])):            ax.errorbar(data_dir_all['noise_vector'],                        data[:,ind_blob_size,0]*1e3,                        yerr=delta_data[:,ind_blob_size,0]*1e3,                        label=str((ind_blob_size+2)*5/10))        #ax.legend(title='Blob size')        ax.set_xlabel('Relative noise \namplitude')        ax.set_ylabel('Difference')        ax.set_title('Comparison of \n radial position')        ax.text(xlabel_pos, ylabel_pos, '(e)', transform=ax.transAxes, size=9)        ax.set_xlim([0,0.2])        ax.set_ylim([-2,2])        ax.axhline(y=0,color='black')        ax=axs[2,1]        for ind_blob_size in range(len(data_dir_mean[0,:,1])):            ax.errorbar(data_dir_all['noise_vector'],                        data[:,ind_blob_size,1],                        yerr=delta_data[:,ind_blob_size,1],                        label=str((ind_blob_size+2)*5/10))        #ax.legend(title='Blob size')        ax.set_xlabel('Relative noise \namplitude')        ax.set_title('Comparison of \nvertical position')        ax.text(xlabel_pos, ylabel_pos, '(f)', transform=ax.transAxes, size=9)        ax.set_xlim([0,0.2])        ax.set_ylim([-2,2])        ax.yaxis.set_tick_params(labelleft=False)        ax.axhline(y=0,color='black')        plt.tight_layout(pad=0.5)        plt.tight_layout(pad=0.2)        ax.legend(title='Blob\nsize\n[$\Delta R$]',                  loc='upper center',                  bbox_to_anchor=(-0.5, 2.))        pdf.savefig()        pdf.close()        if save_data_into_txt:            filename=wd+fig_dir+'/data_accessibility/'+filename+'.txt'            file1=open(filename, 'w+')            string='\nRelative noise amplitude\n\n'            for ind in range(len(data_dir_all['noise_vector'])):                string+=str(data_dir_all['noise_vector'][ind])+'\t'            string+='\n'            file1.write(string)            string='\n Fig 9a \n Average radial blob size deviation undulation minimization\n'            file1.write(string)            for ind_blob_size in range(len(data_und_mean[0,:,0])):                data=data_und_mean[:,ind_blob_size,0]*1e3                error=delta_data_und[:,ind_blob_size,0]*1e3                string='\nBlob size [$\Delta R$]:'+str((ind_blob_size+2)*5/10)+' \n'                err_string='\nUncertainty for blob size '+str((ind_blob_size+2)*5/10)+' \n'                for ind in range(len(data)):                    string+=str(data[ind])+'\t'                    err_string+=str(error[ind])+'\t'                string+='\n'                err_string+='\n'                file1.write(string)                file1.write(err_string)            string='\n Fig 9b \n Average radial blob size deviation direct inversion\n'            file1.write(string)            for ind_blob_size in range(len(delta_data_und[0,:,0])):                data=data_dir_mean[:,ind_blob_size,0]*1e3                error=delta_data_dir[:,ind_blob_size,0]*1e3                string='\nBlob size [$\Delta R$]:'+str((ind_blob_size+2)*5/10)+' \n'                err_string='\nUncertainty for blob size '+str((ind_blob_size+2)*5/10)+' \n'                for ind in range(len(data)):                    string+=str(data[ind])+'\t'                    err_string+=str(error[ind])+'\t'                string+='\n'                err_string+='\n'                file1.write(string)                file1.write(err_string)            string='\n Fig 9c \n Average vertical blob size deviation undulation minimization\n'            file1.write(string)            for ind_blob_size in range(len(data_dir_mean[0,:,0])):                data=data_dir_mean[:,ind_blob_size,1],                error=delta_data_dir[:,ind_blob_size,1],                string='\nBlob size [$\Delta R$]:'+str((ind_blob_size+2)*5/10)+' \n'                err_string='\nUncertainty for blob size '+str((ind_blob_size+2)*5/10)+' \n'                for ind in range(len(data)):                    string+=str(data[ind])+'\t'                    err_string+=str(error[ind])+'\t'                string+='\n'                err_string+='\n'                file1.write(string)                file1.write(err_string)            string='\n Fig 9d \n Average vertical blob size deviation direct inversion\n'            file1.write(string)            for ind_blob_size in range(len(delta_data_dir[0,:,0])):                data=data_dir_mean[:,ind_blob_size,1]                error=delta_data_dir[:,ind_blob_size,1]                string='\nBlob size [$\Delta R$]:'+str((ind_blob_size+2)*5/10)+' \n'                err_string='\nUncertainty for blob size '+str((ind_blob_size+2)*5/10)+' \n'                for ind in range(len(data)):                    string+=str(data[ind])+'\t'                    err_string+=str(error[ind])+'\t'                string+='\n'                err_string+='\n'                file1.write(string)                file1.write(err_string)            data=(np.mean(np.abs(np.squeeze((data_und_all['pos_calc'].T-data_und_all['pos_orig'].T)/data_und_all['pos_orig'].T)),axis=2)-                  np.mean(np.abs(np.squeeze((data_dir_all['pos_calc'].T-data_dir_all['pos_orig'].T)/data_dir_all['pos_orig'].T)),axis=2))            delta_data=np.sqrt(np.var(np.abs(np.squeeze((data_dir_all['pos_calc'].T-data_dir_all['pos_orig'].T)/data_und_all['pos_orig'].T)),axis=2)+                               np.var(np.abs(np.squeeze((data_und_all['pos_calc'].T-data_und_all['pos_orig'].T)/data_und_all['pos_orig'].T)),axis=2))            string='\n Fig 9e \n Difference between Fig 9a and Fig 9b\n'            file1.write(string)            for ind_blob_size in range(len(data_und_mean[0,:,1])):                data_cur=data[:,ind_blob_size,0]*1e3                error=delta_data[:,ind_blob_size,0]*1e3                string='\nBlob size [$\Delta R$]:'+str((ind_blob_size+2)*5/10)+' \n'                err_string='\nUncertainty for blob size '+str((ind_blob_size+2)*5/10)+' \n'                for ind in range(len(data_cur)):                    string+=str(data_cur[ind])+'\t'                    err_string+=str(error[ind])+'\t'                string+='\n'                err_string+='\n'                file1.write(string)                file1.write(err_string)            string='\n Fig 9f \n Difference between Fig 9c and Fig 9d\n'            file1.write(string)            for ind_blob_size in range(len(delta_data_und[0,:,1])):                data_cur=data[:,ind_blob_size,1]*1e3                error=delta_data[:,ind_blob_size,1]*1e3                string='Blob size [$\Delta R$]:'+str((ind_blob_size+2)*5/10)+' \n'                err_string='\nUncertainty for blob size '+str((ind_blob_size+2)*5/10)+' \n'                for ind in range(len(data_cur)):                    string+=str(data_cur[ind])+'\t'                    err_string+=str(error[ind])+'\t'                string+='\n'                err_string+='\n'                file1.write(string)                file1.write(err_string)            file1.close()    if plot_figure == 10:        data_und_all=readsav('/Users/mlampert/IDLWorkspace83/test_decomp_all_save_0-50noise_nores_dens.sav')        data_dir_all=readsav('/Users/mlampert/IDLWorkspace83/test_decomp_all_save_0-50noise_nores_dens_direct.sav')        filename='fig10_position_vs_noise'        pdf=PdfPages(wd+fig_dir+'/'+filename+'.pdf')        xlabel_pos= 0.        ylabel_pos= 1.10        fig,axs=plt.subplots(3,2,figsize=(8.5/2.54,1.5*8.5/2.54))        data_und_mean=np.mean(np.squeeze((data_und_all['fwhm_calc'].T-data_und_all['fwhm_orig'].T)/data_und_all['fwhm_orig'].T),axis=2)        delta_data_und=np.sqrt(np.var(np.squeeze((data_und_all['fwhm_calc'].T-data_und_all['fwhm_orig'].T)/data_und_all['fwhm_orig'].T),axis=2))        data_dir_mean=np.mean(np.squeeze((data_dir_all['fwhm_calc'].T-data_dir_all['fwhm_orig'].T)/data_dir_all['fwhm_orig'].T),axis=2)        delta_data_dir=np.sqrt(np.var(np.squeeze((data_dir_all['fwhm_calc'].T-data_dir_all['fwhm_orig'].T)/data_dir_all['fwhm_orig'].T),axis=2))        yrange_rad=np.asarray([np.min([data_und_mean[:,:,0]-delta_data_und[:,:,0],                                       #data_dir_mean[:,:,0]-delta_data_dir[:,:,0]                                       ]),                                np.max([data_und_mean[:,:,0]+delta_data_und[:,:,0],                                        #data_dir_mean[:,:,0]+delta_data_dir[:,:,0]                                        ])])        yrange_vert=np.asarray([np.min([data_und_mean[:,:,1]-delta_data_und[:,:,1],                                        #data_dir_mean[:,:,1]-delta_data_dir[:,:,1]                                        ]),                                np.max([data_und_mean[:,:,1]+delta_data_und[:,:,1],                                        #data_dir_mean[:,:,1]+delta_data_dir[:,:,1]                                        ])])        ax=axs[0,0]        for ind_blob_size in range(len(data_und_mean[0,:,0])):            ax.errorbar(data_dir_all['noise_vector'],                        data_und_mean[:,ind_blob_size,0],                        yerr=delta_data_und[:,ind_blob_size,0],                        label=str((ind_blob_size+2)*5/10))        #ax.legend(title='Blob size')        ax.set_ylabel('Relative $\Delta d_{R,blob}$')        ax.set_title('Undulation min.')        ax.text(xlabel_pos, ylabel_pos, '(a)', transform=ax.transAxes, size=9)        ax.xaxis.set_tick_params(labelbottom=False)        ax.set_ylim([-0.66,yrange_rad[1]])        ax.set_xlim([0,0.2])        ax.set_yticks([-0.5,0.0,0.5,1,1.5])        ax.axhline(y=0,color='black')        ax=axs[0,1]        for ind_blob_size in range(len(data_dir_mean[0,:,0])):            ax.errorbar(data_dir_all['noise_vector'],                        data_dir_mean[:,ind_blob_size,0],                        yerr=delta_data_dir[:,ind_blob_size,0],                        label=str((ind_blob_size+2)*5/10))        ax.set_title('Direct inv.')        ax.text(xlabel_pos, ylabel_pos, '(b)', transform=ax.transAxes, size=9)        ax.xaxis.set_tick_params(labelbottom=False)        ax.yaxis.set_tick_params(labelleft=False)        ax.set_ylim([-0.66,yrange_rad[1]])        ax.set_xlim([0,0.2])        ax.set_yticks([-0.5,0.0,0.5,1,1.5])        ax.axhline(y=0,color='black')        ax=axs[1,0]        for ind_blob_size in range(len(data_und_mean[0,:,1])):            ax.errorbar(data_dir_all['noise_vector'],                        data_und_mean[:,ind_blob_size,1],                        yerr=delta_data_und[:,ind_blob_size,1],                        label=str((ind_blob_size+2)*5/10))        #ax.legend(title='Blob size')        #ax.set_xlabel('Relative noise \namplitude')        ax.set_ylabel('Relative $\Delta d_{z,blob}$')        ax.set_title('Undulation min.')        ax.text(xlabel_pos, ylabel_pos, '(c)', transform=ax.transAxes, size=9)        ax.xaxis.set_tick_params(labelbottom=False)        ax.set_ylim(1.5*yrange_vert)        ax.set_xlim([0,0.2])        ax.axhline(y=0,color='black')        ax=axs[1,1]        for ind_blob_size in range(len(data_dir_mean[0,:,1])):            ax.errorbar(data_dir_all['noise_vector'],                    data_dir_mean[:,ind_blob_size,1],                    yerr=delta_data_dir[:,ind_blob_size,1],                    label=str((ind_blob_size+2)*5/10))        #ax.legend(title='Blob size')        #ax.set_xlabel('Relative noise \namplitude')        ax.set_title('Direct inv.')        ax.text(xlabel_pos, ylabel_pos, '(d)', transform=ax.transAxes, size=9)        ax.xaxis.set_tick_params(labelbottom=False)        ax.yaxis.set_tick_params(labelleft=False)        ax.set_ylim(1.5*yrange_vert)        ax.set_xlim([0,0.2])        ax.axhline(y=0,color='black')        data=(np.mean(np.abs(np.squeeze((data_und_all['fwhm_calc'].T-data_und_all['fwhm_orig'].T)/data_und_all['fwhm_orig'].T)),axis=2)-              np.mean(np.abs(np.squeeze((data_dir_all['fwhm_calc'].T-data_dir_all['fwhm_orig'].T)/data_und_all['fwhm_orig'].T)),axis=2))        delta_data=np.sqrt(np.var(np.abs(np.squeeze((data_dir_all['fwhm_calc'].T-data_dir_all['fwhm_orig'].T)/data_und_all['fwhm_orig'].T)),axis=2)+                           np.var(np.abs(np.squeeze((data_und_all['fwhm_calc'].T-data_und_all['fwhm_orig'].T)/data_und_all['fwhm_orig'].T)),axis=2))        ax=axs[2,0]        for ind_blob_size in range(len(data_und_mean[0,:,1])):            ax.errorbar(data_dir_all['noise_vector'],                        data[:,ind_blob_size,0],                        yerr=delta_data[:,ind_blob_size,0],                        label=str((ind_blob_size+2)*5/10))        #ax.legend(title='Blob size')        ax.set_xlabel('Relative noise \namplitude')        ax.set_ylabel('Difference')        ax.set_title('Comparison of \nradial size')        ax.text(xlabel_pos, ylabel_pos, '(e)', transform=ax.transAxes, size=9)        ax.set_xlim([0,0.2])        ax.set_ylim([-2,2])        ax.axhline(y=0,color='black')        ax=axs[2,1]        for ind_blob_size in range(len(data_dir_mean[0,:,1])):            ax.errorbar(data_dir_all['noise_vector'],                        data[:,ind_blob_size,1],                        yerr=delta_data[:,ind_blob_size,1],                        label=str((ind_blob_size+2)*5/10))        #ax.legend(title='Blob size')        ax.set_xlabel('Relative noise \namplitude')        ax.set_title('Comparison of \nvertical size')        ax.text(xlabel_pos, ylabel_pos, '(f)', transform=ax.transAxes, size=9)        ax.set_xlim([0,0.2])        ax.set_ylim([-2,2])        ax.yaxis.set_tick_params(labelleft=False)        ax.axhline(y=0,color='black')        plt.tight_layout(pad=0.5)        # ax.legend(title='Blob\nsize\n[$\Delta R$]',        #           loc='upper center',        #           bbox_to_anchor=(1., 2.))        pdf.savefig()        pdf.close()        if save_data_into_txt:            filename=wd+fig_dir+'/data_accessibility/'+filename+'.txt'            file1=open(filename, 'w+')            string='\nRelative noise amplitude\n\n'            for ind in range(len(data_dir_all['noise_vector'])):                string+=str(data_dir_all['noise_vector'][ind])+'\t'            string+='\n'            file1.write(string)            string='\n Fig 10a \n Average radial blob position deviation undulation minimization\n'            file1.write(string)            for ind_blob_size in range(len(data_und_mean[0,:,0])):                data=data_und_mean[:,ind_blob_size,0]*1e3                error=delta_data_und[:,ind_blob_size,0]*1e3                string='\nBlob size [$\Delta R$]:'+str((ind_blob_size+2)*5/10)+' \n'                err_string='\nUncertainty for blob size '+str((ind_blob_size+2)*5/10)+' \n'                for ind in range(len(data)):                    string+=str(data[ind])+'\t'                    err_string+=str(error[ind])+'\t'                string+='\n'                err_string+='\n'                file1.write(string)                file1.write(err_string)            string='\n Fig 10b \n Average radial blob position deviation direct inversion\n'            file1.write(string)            for ind_blob_size in range(len(delta_data_und[0,:,0])):                data=data_dir_mean[:,ind_blob_size,0]*1e3                error=delta_data_dir[:,ind_blob_size,0]*1e3                string='\nBlob size [$\Delta R$]:'+str((ind_blob_size+2)*5/10)+' \n'                err_string='\nUncertainty for blob size '+str((ind_blob_size+2)*5/10)+' \n'                for ind in range(len(data)):                    string+=str(data[ind])+'\t'                    err_string+=str(error[ind])+'\t'                string+='\n'                err_string+='\n'                file1.write(string)                file1.write(err_string)            string='\n Fig 10c \n Average vertical blob position deviation undulation minimization\n'            file1.write(string)            for ind_blob_size in range(len(data_dir_mean[0,:,0])):                data=data_dir_mean[:,ind_blob_size,1],                error=delta_data_dir[:,ind_blob_size,1],                string='\nBlob size [$\Delta R$]:'+str((ind_blob_size+2)*5/10)+' \n'                err_string='\nUncertainty for blob size '+str((ind_blob_size+2)*5/10)+' \n'                for ind in range(len(data)):                    string+=str(data[ind])+'\t'                    err_string+=str(error[ind])+'\t'                string+='\n'                err_string+='\n'                file1.write(string)                file1.write(err_string)            string='\n Fig 10d \n Average vertical blob position deviation direct inversion\n'            file1.write(string)            for ind_blob_size in range(len(delta_data_dir[0,:,0])):                data=data_dir_mean[:,ind_blob_size,1]                error=delta_data_dir[:,ind_blob_size,1]                string='\nBlob size [$\Delta R$]:'+str((ind_blob_size+2)*5/10)+' \n'                err_string='\nUncertainty for blob size '+str((ind_blob_size+2)*5/10)+' \n'                for ind in range(len(data)):                    string+=str(data[ind])+'\t'                    err_string+=str(error[ind])+'\t'                string+='\n'                err_string+='\n'                file1.write(string)                file1.write(err_string)            data=(np.mean(np.abs(np.squeeze((data_und_all['fwhm_calc'].T-data_und_all['fwhm_orig'].T)/data_und_all['fwhm_orig'].T)),axis=2)-                  np.mean(np.abs(np.squeeze((data_dir_all['fwhm_calc'].T-data_dir_all['fwhm_orig'].T)/data_und_all['fwhm_orig'].T)),axis=2))            delta_data=np.sqrt(np.var(np.abs(np.squeeze((data_dir_all['fwhm_calc'].T-data_dir_all['fwhm_orig'].T)/data_und_all['fwhm_orig'].T)),axis=2)+                               np.var(np.abs(np.squeeze((data_und_all['fwhm_calc'].T-data_und_all['fwhm_orig'].T)/data_und_all['fwhm_orig'].T)),axis=2))            string='\n Fig 10e \n Difference between Fig 10a and Fig 10b\n'            file1.write(string)            for ind_blob_size in range(len(data_und_mean[0,:,1])):                data_cur=data[:,ind_blob_size,0]*1e3                error=delta_data[:,ind_blob_size,0]*1e3                string='\nBlob size [$\Delta R$]:'+str((ind_blob_size+2)*5/10)+' \n'                err_string='\nUncertainty for blob size '+str((ind_blob_size+2)*5/10)+' \n'                for ind in range(len(data_cur)):                    string+=str(data_cur[ind])+'\t'                    err_string+=str(error[ind])+'\t'                string+='\n'                err_string+='\n'                file1.write(string)                file1.write(err_string)            string='\n Fig 10f \n Difference between Fig 10c and Fig 10d\n'            file1.write(string)            for ind_blob_size in range(len(delta_data_und[0,:,1])):                data_cur=data[:,ind_blob_size,1]*1e3                error=delta_data[:,ind_blob_size,1]*1e3                string='Blob size [$\Delta R$]:'+str((ind_blob_size+2)*5/10)+' \n'                err_string='\nUncertainty for blob size '+str((ind_blob_size+2)*5/10)+' \n'                for ind in range(len(data_cur)):                    string+=str(data_cur[ind])+'\t'                    err_string+=str(error[ind])+'\t'                string+='\n'                err_string+='\n'                file1.write(string)                file1.write(err_string)            file1.close()